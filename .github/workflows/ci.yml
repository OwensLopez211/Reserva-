name: ReservaPlus CI/CD

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

jobs:
  # ================================
  # JOB 1: QUALITY GATES
  # ================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'  # ✅ AHORA SÍ PODEMOS USAR CACHE
        
    - name: 📥 Install dependencies (fast with cache)
      run: npm ci  # ✅ npm ci es más rápido y determinístico
      
    - name: 🔧 TypeScript compilation check
      run: npx tsc --noEmit
      
    - name: 🔍 ESLint check (if configured)
      run: npm run lint:check || npm run lint || echo "⚠️ ESLint not configured"
      continue-on-error: true
      
    - name: 🎨 Prettier format check (if configured) 
      run: npm run format:check || echo "⚠️ Prettier not configured"
      continue-on-error: true

  # ================================
  # JOB 2: TESTS (PARALLEL BY MODULE)
  # ================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        test-group: 
          - auth
          - users
          - app
          # - organizations  # Add as you create modules
          # - professionals
          # - appointments
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📥 Install dependencies (cached)
      run: npm ci
      
    - name: 🧪 Run ${{ matrix.test-group }} tests
      run: |
        if [ "${{ matrix.test-group }}" = "app" ]; then
          npm run test -- --testPathPattern="app\." --coverage
        else
          npm run test -- --testPathPattern="${{ matrix.test-group }}" --coverage
        fi
      
    - name: 📊 Upload coverage for ${{ matrix.test-group }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.test-group }}
        path: coverage/
        retention-days: 3

  # ================================
  # JOB 3: COVERAGE REPORT
  # ================================
  coverage:
    name: 📊 Coverage Report
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📥 Install dependencies (cached)
      run: npm ci
      
    - name: 🧪 Run full test suite with coverage
      run: npm run test:cov
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: reservaplus-coverage
        fail_ci_if_error: false
      continue-on-error: true
      
    - name: 📈 Coverage Summary
      run: |
        echo "📊 COVERAGE SUMMARY:"
        cat coverage/coverage-summary.json | jq '.total'
        echo ""
        echo "📋 DETAILED COVERAGE:"
        npm run test:cov -- --silent | grep -E "(File|All files|---|%)"

  # ================================
  # JOB 4: BUILD
  # ================================
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📥 Install dependencies (cached)
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 📦 Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 7
        
    - name: 📊 Build size analysis
      run: |
        echo "📦 BUILD SIZE ANALYSIS:"
        du -sh dist/
        echo ""
        echo "📋 LARGEST FILES:"
        find dist/ -type f -exec du -h {} + | sort -rh | head -10

  # ================================
  # JOB 5: SECURITY AUDIT (OPTIONAL)
  # ================================
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📥 Install dependencies (cached)
      run: npm ci
      
    - name: 🔒 Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: 🛡️ Security summary
      run: |
        echo "🔒 SECURITY AUDIT SUMMARY:"
        npm audit --audit-level low --parseable | wc -l
        echo "vulnerabilities found (low level)"

  # ================================
  # JOB 6: SUCCESS NOTIFICATION
  # ================================
  success:
    name: ✅ Pipeline Success
    runs-on: ubuntu-latest
    needs: [coverage, build, security]
    if: success()
    
    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 ¡Pipeline completado exitosamente!"
        echo "✅ Calidad de código: PASSED"
        echo "✅ Tests: PASSED" 
        echo "✅ Coverage: PASSED"
        echo "✅ Build: PASSED"
        echo "✅ Security: PASSED"
        echo ""
        echo "🚀 ¡Listo para deploy!"